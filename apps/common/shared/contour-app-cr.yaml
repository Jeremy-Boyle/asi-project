#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ "{}-contour-helm-values".format(data.values.cluster_name)
  namespace: #@ data.values.namespace
stringData:
  values.yaml: |
    configInline:
    disablePermitInsecure: false
    tls:
      fallback-certificate: {}
    leaderelection:
      configmap-namespace: "contour"
    envoy-service-name: 'contour-envoy'
    accesslog-format: envoy
---
apiVersion: kappctrl.k14s.io/v1alpha1
kind: App
metadata:
  name: #@ "{}-contour".format(data.values.cluster_name)
  namespace: #@ data.values.namespace
spec:
  cluster:
    kubeconfigSecretRef:
      name: #@ "{}-kubeconfig".format(data.values.cluster_name)
      key: value
  syncPeriod: 5m
  paused: false
  fetch:
  - helmChart:
      name: contour
      repository:
        url: https://charts.bitnami.com/bitnami
      version: "7.3.6"

  template:
  - helmTemplate:
      name: contour
      namespace: contour
      valuesFrom:
      - secretRef:
          name: #@ "{}-contour-helm-values".format(data.values.cluster_name)

  - ytt:
      ignoreUnknownComments: true
      inline:
        paths:
          00-namespace.yaml: |
            #@ load("@ytt:overlay", "overlay")
            ---
            apiVersion: v1
            kind: Namespace
            metadata:
              labels:
                kubernetes.io/metadata.name: contour
              name: contour


              #@ servicemonitor = overlay.subset({"kind": "ServiceMonitor"})
              #@ namespace = overlay.subset({"kind": "Namespace"})
              #@ crd = overlay.subset({"kind": "CustomResourceDefinition"})
              #@overlay/match by=overlay.not_op(overlay.or_op(servicemonitor, namespace, crd)),expects="0+"
              ---
              #@overlay/match missing_ok=True
              metadata:
                #@overlay/match missing_ok=True
                namespace: contour
  deploy:
  - kapp:
      rawOptions:
      - --wait-timeout=5m
      - --diff-changes=true